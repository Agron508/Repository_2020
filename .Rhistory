data("constants")
results <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
##try to make simple plot
plot(results$ET.Daily)
##Your Turn:
##Now please make some changes to the graph. You can use the previous R script in the Announcement in Canvas.
#<<<<<<< HEAD
#Plot by Richard
plot(data$Date.daily,results$ET.Daily, main="Penman-Monteith Formulation for Kent Town, Adelaide",
xlab="Year", ylab="Evapotransporation (mm)")
grid()
#=======
#Josh's Plot ====================================================================
totalET = cumsum(results$ET.Monthly) #Cumulative ET
par(mar=c(4, 4, 4, 4)) #Set the margine size around the plot
#Plot Monthly ET, format axis
plot(results$ET.Monthly, ylim = c(0,250), col = "deepskyblue", main = "Evapotranspiration", xlab = "Year", ylab = "Monthly ET (mm)", lwd = "3")
axis(2, ylim=c(0,5000), col="deepskyblue",col.axis="deepskyblue")
#Allow for a second line on the plot
par(new=TRUE)
#Plot Cumulative ET, format axis
plot(totalET, ylim = c(0,5000), col = "chartreuse4", axes = FALSE, xlab="", ylab = "", lwd = "3")
mtext("Cumulative ET (mm)",side=4,col="black", line=3)
axis(4, ylim=c(0,5000), col="chartreuse4",col.axis="chartreuse4")
#Set gridlines on plot
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")
#Andy's Plot ====================================================================
tmax=data$Tmax
tdew=data$Tdew
tmin=data$Tmin
plot(tmax,results$ET.Daily, xlab="Maximum Temperature (C)",ylab = "Daily ET (mm)", lwd = "3")
plot(tmin,results$ET.Daily, xlab="Minmum Temperature (C)",ylab = "Daily ET (mm)", lwd = "3")
plot(tdew,results$ET.Daily, xlab="Dew Point Temperature (C)",ylab = "Daily ET (mm)", lwd = "3")
plot(tmin,tdew, xlab="Dew Point Temperature (C)",ylab = "Minmum Temperature (C)", lwd = "3")
#>>>>>>>Tyler's plot
tmax=data$Tmax
tdew=data$Tdew
tmin=data$Tmin
plot(tmax,tmin)
###This is where we got stuck.  Need to create a monthly variable to average by.
maxday<-aggregate(cbind(data$Tmax)~data$Date.monthly,data,max)
plot(data$Date.monthly)
plot(tmax,results$ET.Monthly, xlab="Maximum Temperature (C)",ylab = "Monthly ET (mm)", lwd = "3")
###Rojda`s response for Tyler`s Plot===============================================================
monthTmax<-data.frame(data$Tmax)
monthTmax$Date<-data$Date.daily
colnames(monthTmax)<-c("Tmax","DateTime")
class(monthTmax$DateTime)
[1] "Date"
monthTmax$Month<-as.Date(cut(monthTmax$DateTime,breaks = "month"))
maxday<-aggregate(cbind(monthTmax$Tmax)~monthTmax$Month,monthTmax,max)
colnames(maxday)<-c("Month","Tmax")
library(lubridate)
#--make the dataframe into a tibble bc they are easier to view
maxday <- as_tibble(maxday) %>%
mutate(ET_monthly = as.vector(results$ET.Monthly),
year_month = Month,
year_id = year(Month),
month_id=month(Month))
maxday %>% write_csv("data/tidy/ET_miscanthus_example")
maxday %>%
ggplot(aes(Tmax, ET_monthly)) +
geom_point(aes(color = as.factor(year_id)), size = 5)
plot(maxday$Tmax,results$ET.Monthly, xlab="Maximum Temperature (C)",ylab = "Monthly ET (mm)", lwd = "3", col="red") #this plot shows monthly cumulative ET versus maximum temperature @ Month
shiny::runApp('OurFirstShiny')
runApp('OurFirstShiny')
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
dat <- read_csv("data/tidy/data_ET-for-shiny.csv")
#--create the drop down menu values
dd_year <- dat %>% select(year_id) %>% pull() %>% unique()
dat
library(lubridate)
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
dat <- read_csv("data/tidy/data_ET-for-shiny.csv") %>%
mutate(month = month(Month))
dat
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
dat <- read_csv("data/tidy/data_ET-for-shiny.csv") %>%
mutate(month = month(Month, label = T))
dat
dd_month <- dat %>% select(month) %>% pull() %>% unique()
dat
library(shiny)
library(tidyverse)
library(scales)
library(lubridate)
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
dat <- read_csv("data/tidy/data_ET-for-shiny.csv") %>%
mutate(month = month(Month, label = T))
#--create the drop down menu values
dd_year <- dat %>% select(year_id) %>% pull() %>% unique()
dd_month <- dat %>% select(month) %>% pull() %>% unique()
ui <- fluidPage(
# Application title
titlePanel("Tyler's ET Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("myyear",
"Year oh what fun:",
choices = dd_year)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("etPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
##--build reactive dataset, changes year highlight
liq_dat <- reactive({
dat %>%
#mutate(color_id = ifelse(month_id == input$mymonth, "selected month", "no"))
mutate(color_id = ifelse(year_id == input$myyear, "selected year", "no"))
})
output$etPlot <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat(),
aes(x =month,
y = ET_monthly)) +
geom_point(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected year" = "red",
"no" = "gray80")) +
#labs(x = "Maximum Monthly Temp (degC)",
#     y = "Montly Total Evapotranspiration (ET; mm)",
#     color = NULL)
theme_bw()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
##--build reactive dataset, changes year highlight
liq_dat <- reactive({
dat %>%
#mutate(color_id = ifelse(month_id == input$mymonth, "selected month", "no"))
mutate(color_id = ifelse(year_id == input$myyear, "selected year", "no"))
})
output$etPlot <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat(),
aes(x =month,
y = ET_monthly)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected year" = "red",
"no" = "gray80")) +
#labs(x = "Maximum Monthly Temp (degC)",
#     y = "Montly Total Evapotranspiration (ET; mm)",
#     color = NULL)
theme_bw()
})
}
# Run the application
shinyApp(ui = ui, server = server)
DailyET_Miscanthus_2009.2011.csv <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_Miscanthus_2009-2011.csv.csv")
View(DailyET_Miscanthus_2009.2011.csv)
DailyET_SABR_miscanthus <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_SABR_miscanthus.csv")
View(DailyET_SABR_miscanthus)
DailyET_SABR_miscanthus <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_SABR_miscanthus.csv")
DailyET1<-DailyET_SABR_miscanthus
library(Evapotranspiration)
#download example data
data("processeddata")
data("constants")
library(argosfilter)
radian( 41.9985)#argosfilter package
data1<-data
constants1<-constants
constants$Elev=316.9
constants$lat_rad=0.7330121
constants$z=4 #wind isntrument height, m
constants$PA=503 #it is for  the time from june 2019-feb 2020 precipitation mm
data$Date.daily<-DailyET1$Date.daily
data$Date.monthly<-DailyET1$Date.monthly
data$J<-DailyET1$J
data$i<-DailyET1$i
data$Ndays<-DailyET1$ndays
data$Tmax<-DailyET1$Tmax
data$Tmin<-DailyET1$Tmin
data$Tdew<-DailyET1$Tdew
data$RHmax<-DailyET1$RHmax
data$RHmin<-DailyET1$RHmin
data$uz<-DailyET1$uz
data$n<-DailyET1$n
library(zoo)
data$Date.daily<-ymd(data$Date.daily)
data$J<-zoo(yday(data$Date.daily))
data$Ndays<-zoo(as.double(data$Ndays))
data$Tmax<-zoo(data$Tmax)
data$Tmin<-zoo(data$Tmin)
data$Tdew<-zoo(data$Tdew)
data$RHmax<-zoo(data$RHmax)
data$RHmin<-zoo(data$RHmin)
data$uz<-zoo(data$uz)
data$n<-zoo(data$n)
results1 <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
plot(DailyET1$Date,DailyET1$ET_EC)
plot.zoo( cbind(results1$ET.Daily, DailyET1$ET_EC),
plot.type = "single",
col = c("red", "blue"))
library(lubridate)
ET_Miscanthus_SAB<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
year_month = Month,
year_id = year(Month),
month_id=month(Month))
results <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
ET_Miscanthus_SAB<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
year_month = Month,
year_id = year(Month),
month_id=month(Month))
View(DailyET1)
ET_Miscanthus_SAB<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
year_month = DailyET1$Date.monthly,
year_id = year(Month),
month_id=month(Month))
ET_Miscanthus_SAB<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
day_id = month(DailyET1$Date.daily),
month_id=month(DailyET1$Date.monthly))
ET_Miscanthus_SAB<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
day_id = month(Day),
month_id=month(Month))
ET_Miscanthus_SABR<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
month_id=month(Month))
ET_Miscanthus_SABR<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
month_id=month(DailyET1$Date.monthly))
DailyET1$Month<-as.Date(cut(DailyET1$Date,breaks = "month"))
class(DailyET1$Date)
DailyET1$Date<-ymd(DailyET1$Date)
DailyET1$Month<-as.Date(cut(DailyET1$Date,breaks = "month"))
ET_Miscanthus_SABR<- as_tibble(results$ET.daily) %>%
mutate(ET_daily = as.vector(results$ET.daily),
month_id=month(DailyET1$Month))
month_id=month(DailyET1$Month)
ET_daily = as.vector(results$ET.daily)
as.vector(results$ET.daily)
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
month_id=month(DailyET1$Month))
View(ET_Miscanthus_SABR)
ET_Miscanthus_SAB
ET_Miscanthus_SABR
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
View(ET_Miscanthus_SABR)
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
year_month = DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
View(ET_Miscanthus_SABR)
ET_Miscanthus_SABR
ET_Miscanthus_SABR %>% write_csv("data/tidy/ET_miscanthus_SABR")
getwd()
runApp('Rojda_OurFirstShiny')
getwd
getwd()
runApp('Rojda_OurFirstShiny')
dat <- read_csv("data/tidy/ET_miscanthus_SABR")
runApp('Rojda_OurFirstShiny')
ET_Miscanthus_SABR %>% write_csv("data/tidy/ET_miscanthus_SABR.csv")
runApp('Rojda_OurFirstShiny')
'C:/Users/myAdmins/Documents/GitHub/Repository_2020/Rojda_OurFirstShiny'
setwd("~/GitHub/Repository_2020")
runApp('Rojda_OurFirstShiny')
setwd("~/GitHub/Repository_2020")
runApp('Rojda_OurFirstShiny')
dat <- read_csv("data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T))
View(ET_Miscanthus_SABR)
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
ET_Miscanthus_SABR %>% write_csv("data/tidy/ET_miscanthus_SABR.csv")
runApp('Rojda_OurFirstShiny')
ET_miscanthus_SABR <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv")
View(ET_miscanthus_SABR)
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
DailyET_SABR_miscanthus <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_SABR_miscanthus.csv")
View(DailyET_SABR_miscanthus)
DailyET1<-DailyET_SABR_miscanthus
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
DOY=yday(DailyET1$Date)
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
DOY=yday(DailyET1$Date),
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
#March 2, 2020
##appliying "Evapotranspiratio" package for the SABR miscanthus site
#I prepared the available format data set for the package and uploaded in the Box under Agron 508-S20 folder named as "DailyET_SABR_miscanthus"
#please first import "DailyET_SABR_miscanthus" csv file.
DailyET_SABR_miscanthus <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_SABR_miscanthus.csv")
DailyET1<-DailyET_SABR_miscanthus
library(Evapotranspiration)
#download example data
data("processeddata")
data("constants")
#constants
#Elev - ground elevation above mean sea level in m, !!224m(for our case)
#lambda - latent heat of vaporisation = 2.45 MJ.kg^-1,
#lat_rad - latitude in radians,
#Gsc - solar constant = 0.0820 MJ.m^-2.min^-1,
#z - height of wind instrument in m,
#sigma - Stefan-Boltzmann constant = 4.903*10^-9 MJ.K^-4.m^-2.day^-1.
#G - soil heat flux in MJ.m^-2.day^-1, = 0 when using daily time step.
library(argosfilter)
radian( 41.9985)#argosfilter package
[1] 0.7330121
#and then changed the parameters with our site values
data1<-data
constants1<-constants
constants$Elev=316.9
constants$lat_rad=0.7330121
constants$z=4 #wind isntrument height, m
constants$PA=503 #it is for  the time from june 2019-feb 2020 precipitation mm
# change the parameters values in example"data" list with our site values.
data$Date.daily<-DailyET1$Date.daily
data$Date.monthly<-DailyET1$Date.monthly
data$J<-DailyET1$J
data$i<-DailyET1$i
data$Ndays<-DailyET1$ndays
data$Tmax<-DailyET1$Tmax
data$Tmin<-DailyET1$Tmin
data$Tdew<-DailyET1$Tdew
data$RHmax<-DailyET1$RHmax
data$RHmin<-DailyET1$RHmin
data$uz<-DailyET1$uz
data$n<-DailyET1$n
# changing class of the variables in the "data" list
library(zoo)
data$Date.daily<-ymd(data$Date.daily)
data$J<-zoo(yday(data$Date.daily))
data$Ndays<-zoo(as.double(data$Ndays))
data$Tmax<-zoo(data$Tmax)
data$Tmin<-zoo(data$Tmin)
data$Tdew<-zoo(data$Tdew)
data$RHmax<-zoo(data$RHmax)
data$RHmin<-zoo(data$RHmin)
data$uz<-zoo(data$uz)
data$n<-zoo(data$n)
results <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
#to compare with the ET data from Ec:
plot(DailyET1$Date,DailyET1$ET_EC)
plot.zoo( cbind(results1$ET.Daily, DailyET1$ET_EC),
plot.type = "single",
col = c("red", "blue"))
#you can try to plot the figure using ggplot as we used before
library(lubridate)
class(DailyET1$Date)
DailyET1$Date<-ymd(DailyET1$Date)
DailyET1$Month<-as.Date(cut(DailyET1$Date,breaks = "month"))
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
DOY=yday(DailyET1$Date),
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
#March 2, 2020
##appliying "Evapotranspiratio" package for the SABR miscanthus site
#I prepared the available format data set for the package and uploaded in the Box under Agron 508-S20 folder named as "DailyET_SABR_miscanthus"
#please first import "DailyET_SABR_miscanthus" csv file.
DailyET_SABR_miscanthus <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_SABR_miscanthus.csv")
DailyET1<-DailyET_SABR_miscanthus
library(Evapotranspiration)
#download example data
data("processeddata")
data("constants")
#constants
#Elev - ground elevation above mean sea level in m, !!224m(for our case)
#lambda - latent heat of vaporisation = 2.45 MJ.kg^-1,
#lat_rad - latitude in radians,
#Gsc - solar constant = 0.0820 MJ.m^-2.min^-1,
#z - height of wind instrument in m,
#sigma - Stefan-Boltzmann constant = 4.903*10^-9 MJ.K^-4.m^-2.day^-1.
#G - soil heat flux in MJ.m^-2.day^-1, = 0 when using daily time step.
library(argosfilter)
radian( 41.9985)#argosfilter package
[1] 0.7330121
#and then changed the parameters with our site values
data1<-data
constants1<-constants
constants$Elev=316.9
constants$lat_rad=0.7330121
constants$z=4 #wind isntrument height, m
constants$PA=503 #it is for  the time from june 2019-feb 2020 precipitation mm
# change the parameters values in example"data" list with our site values.
data$Date.daily<-DailyET1$Date.daily
data$Date.monthly<-DailyET1$Date.monthly
data$J<-DailyET1$J
data$i<-DailyET1$i
data$Ndays<-DailyET1$ndays
data$Tmax<-DailyET1$Tmax
data$Tmin<-DailyET1$Tmin
data$Tdew<-DailyET1$Tdew
data$RHmax<-DailyET1$RHmax
data$RHmin<-DailyET1$RHmin
data$uz<-DailyET1$uz
data$n<-DailyET1$n
# changing class of the variables in the "data" list
library(zoo)
data$Date.daily<-ymd(data$Date.daily)
data$J<-zoo(yday(data$Date.daily))
data$Ndays<-zoo(as.double(data$Ndays))
data$Tmax<-zoo(data$Tmax)
data$Tmin<-zoo(data$Tmin)
data$Tdew<-zoo(data$Tdew)
data$RHmax<-zoo(data$RHmax)
data$RHmin<-zoo(data$RHmin)
data$uz<-zoo(data$uz)
data$n<-zoo(data$n)
results <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
#to compare with the ET data from Ec:
plot(DailyET1$Date,DailyET1$ET_EC)
plot.zoo( cbind(results1$ET.Daily, DailyET1$ET_EC),
plot.type = "single",
col = c("red", "blue"))
#you can try to plot the figure using ggplot as we used before
library(lubridate)
class(DailyET1$Date)
DailyET1$Date<-ymd(DailyET1$Date)
DailyET1$Month<-as.Date(cut(DailyET1$Date,breaks = "month"))
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
DOY=yday(DailyET1$Date),
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
View(ET_Miscanthus_SABR)
ET_Miscanthus_SABR %>% write_csv("data/tidy/ET_miscanthus_SABR.csv")
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
input$mymonth
month_id == input$mymonth
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T))
View(dat)
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(dat, by=list(month),mean, na.rm=TRUE)
)
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(by=list(month),mean, na.rm=TRUE)
)
View(dat)
runApp('Rojda_OurFirstShiny')
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(ET_daily, by=list(month),mean, na.rm=TRUE)
)
ET_monthly=aggregate(dat$ET_daily, by=list(dat$month),mean, na.rm=TRUE)
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(ET_daily, by=list(month),mean, na.rm=TRUE))
View(dat)
View(ET_monthly)
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
git merge origin/master
shiny::runApp('Rojda_OurFirstShiny')
setwd("C:/Users/myAdmins/Desktop/miscanthus energy farm/PMgrass")
shiny::runApp('Tyler-Shiny')
