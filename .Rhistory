data$Tmin<-zoo(data$Tmin)
data$Tdew<-zoo(data$Tdew)
data$RHmax<-zoo(data$RHmax)
data$RHmin<-zoo(data$RHmin)
data$uz<-zoo(data$uz)
data$n<-zoo(data$n)
results <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
#to compare with the ET data from Ec:
plot(DailyET1$Date,DailyET1$ET_EC)
plot.zoo( cbind(results1$ET.Daily, DailyET1$ET_EC),
plot.type = "single",
col = c("red", "blue"))
#you can try to plot the figure using ggplot as we used before
library(lubridate)
class(DailyET1$Date)
DailyET1$Date<-ymd(DailyET1$Date)
DailyET1$Month<-as.Date(cut(DailyET1$Date,breaks = "month"))
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
DOY=yday(DailyET1$Date),
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
#March 2, 2020
##appliying "Evapotranspiratio" package for the SABR miscanthus site
#I prepared the available format data set for the package and uploaded in the Box under Agron 508-S20 folder named as "DailyET_SABR_miscanthus"
#please first import "DailyET_SABR_miscanthus" csv file.
DailyET_SABR_miscanthus <- read.csv("~/GitHub/Repository_2020/data/raw/DailyET_SABR_miscanthus.csv")
DailyET1<-DailyET_SABR_miscanthus
library(Evapotranspiration)
#download example data
data("processeddata")
data("constants")
#constants
#Elev - ground elevation above mean sea level in m, !!224m(for our case)
#lambda - latent heat of vaporisation = 2.45 MJ.kg^-1,
#lat_rad - latitude in radians,
#Gsc - solar constant = 0.0820 MJ.m^-2.min^-1,
#z - height of wind instrument in m,
#sigma - Stefan-Boltzmann constant = 4.903*10^-9 MJ.K^-4.m^-2.day^-1.
#G - soil heat flux in MJ.m^-2.day^-1, = 0 when using daily time step.
library(argosfilter)
radian( 41.9985)#argosfilter package
[1] 0.7330121
#and then changed the parameters with our site values
data1<-data
constants1<-constants
constants$Elev=316.9
constants$lat_rad=0.7330121
constants$z=4 #wind isntrument height, m
constants$PA=503 #it is for  the time from june 2019-feb 2020 precipitation mm
# change the parameters values in example"data" list with our site values.
data$Date.daily<-DailyET1$Date.daily
data$Date.monthly<-DailyET1$Date.monthly
data$J<-DailyET1$J
data$i<-DailyET1$i
data$Ndays<-DailyET1$ndays
data$Tmax<-DailyET1$Tmax
data$Tmin<-DailyET1$Tmin
data$Tdew<-DailyET1$Tdew
data$RHmax<-DailyET1$RHmax
data$RHmin<-DailyET1$RHmin
data$uz<-DailyET1$uz
data$n<-DailyET1$n
# changing class of the variables in the "data" list
library(zoo)
data$Date.daily<-ymd(data$Date.daily)
data$J<-zoo(yday(data$Date.daily))
data$Ndays<-zoo(as.double(data$Ndays))
data$Tmax<-zoo(data$Tmax)
data$Tmin<-zoo(data$Tmin)
data$Tdew<-zoo(data$Tdew)
data$RHmax<-zoo(data$RHmax)
data$RHmin<-zoo(data$RHmin)
data$uz<-zoo(data$uz)
data$n<-zoo(data$n)
results <- ET.PenmanMonteith(data, constants, ts="daily", solar="sunshine hours",
wind="yes", crop = "short", message="yes", AdditionalStats="yes", save.csv="yes")
#to compare with the ET data from Ec:
plot(DailyET1$Date,DailyET1$ET_EC)
plot.zoo( cbind(results1$ET.Daily, DailyET1$ET_EC),
plot.type = "single",
col = c("red", "blue"))
#you can try to plot the figure using ggplot as we used before
library(lubridate)
class(DailyET1$Date)
DailyET1$Date<-ymd(DailyET1$Date)
DailyET1$Month<-as.Date(cut(DailyET1$Date,breaks = "month"))
ET_Miscanthus_SABR<- as_tibble(results$ET.Daily) %>%
mutate(ET_daily = as.vector(results$ET.Daily),
DOY=yday(DailyET1$Date),
Month= DailyET1$Month,
year_id = year(DailyET1$Month),
month_id=month(DailyET1$Month))
View(ET_Miscanthus_SABR)
ET_Miscanthus_SABR %>% write_csv("data/tidy/ET_miscanthus_SABR.csv")
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
input$mymonth
month_id == input$mymonth
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T))
View(dat)
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(dat, by=list(month),mean, na.rm=TRUE)
)
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(by=list(month),mean, na.rm=TRUE)
)
View(dat)
runApp('Rojda_OurFirstShiny')
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(ET_daily, by=list(month),mean, na.rm=TRUE)
)
ET_monthly=aggregate(dat$ET_daily, by=list(dat$month),mean, na.rm=TRUE)
dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month = month(Month, label = T),
ET_monthly=aggregate(ET_daily, by=list(month),mean, na.rm=TRUE))
View(dat)
View(ET_monthly)
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
git merge origin/master
shiny::runApp('Rojda_OurFirstShiny')
setwd("C:/Users/myAdmins/Desktop/miscanthus energy farm/PMgrass")
shiny::runApp('Tyler-Shiny')
<<<<<<< Updated upstream
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(scales)
library(lubridate)
#--read in the data
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
#dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
#  mutate(month = month(Month, label = T))
#ET_monthly=aggregate(dat$ET_daily, by=list(dat$month),mean, na.rm=TRUE)
# use R projects to provide base directory, make sure you have the project open
dat <- read_csv("data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month_id = month(Month, label = T))
# get the mean ET for each month (?)
datmonth <-
dat %>%
group_by(month_id) %>%
summarise(mean_et = mean(ET_daily))
#--create the drop down menu values
dd_year <- dat %>% select(year_id) %>% pull() %>% unique()
dd_month <- dat %>% select(month_id) %>% pull() %>% unique()
ui <- fluidPage(
# Application title
navbarPage("ET SABR Miscanthus"),
tabsetPanel(
tabPanel("Rojda tab", #--start Rojda panel
mainPanel(
sidebarPanel(
selectInput(inputId = "month1",
label = "Month:",
selected = "Jun",
choices = dd_month)
),
mainPanel(plotOutput("etPlot1")))
), #--end Rojda panel
tabPanel("Tyler tab", #--start Tyler tab
mainPanel(
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput(inputId = "month2",
label = "Tyler's Favorite Month:",
selected = "Jul",
choices = dd_month)
),
mainPanel(plotOutput("etPlot2")))
), #--end Tyler panel
# Show a plot of the generated distribution
mainPanel(
plotOutput("etPlot"),
plotOutput("et2")
)
)
)
# Define server logic required
server <- function(input, output) {
#--build reactive dataset, changes year and month highlight
liq_dat <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$mymonth, "selected month", "no"))})
# this is for Rojda's tab--------------------------
liq_dat1 <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$month1, "selected", "no"))})
output$etPlot1 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat1(),
aes(x =DOY,
y = ET_daily)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected" = "red",
"no" = "gray80")) +
theme_bw()
})
# This is for Tyler's tab-------------------
liq_dat2 <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$month2, "selected", "no"))
})
output$etPlot2 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat2(),
aes(x =DOY,
y = ET_daily)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected" = "red",
"no" = "gray80")) +
theme_bw()
})
##--build reactive dataset, changes year highlight
liq_dat <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$myyear, "selected month", "no"))
})
output$et2 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = ET_monthly,
aes(x =Group.1,
y = x)) +
#facet_wrap( ~ month,ncol=3)+
#geom_jitter(aes(color = ""), size = 3) +
geom_point(color="red", size=3)+
scale_color_manual(values = c("selected month" = "red",
"no" = "gray80")) +
ylab("Evapotranspiration (mm/day)")+xlab("")+
theme_bw()
})
}
# Run the application
#shinyApp(ui = ui2, server = server)
shinyApp(ui = ui, server = server)
runApp('Rojda_OurFirstShiny')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(scales)
library(lubridate)
#--read in the data
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
#dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
#  mutate(month = month(Month, label = T))
#ET_monthly=aggregate(dat$ET_daily, by=list(dat$month),mean, na.rm=TRUE)
# use R projects to provide base directory, make sure you have the project open
dat <- read_csv("data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month_id = month(Month, label = T))
# get the mean ET for each month (?)
datmonth <-
dat %>%
group_by(month_id) %>%
summarise(mean_et = mean(ET_daily))
#--create the drop down menu values
dd_year <- dat %>% select(year_id) %>% pull() %>% unique()
dd_month <- dat %>% select(month_id) %>% pull() %>% unique()
ui <- fluidPage(
# Application title
navbarPage("ET SABR Miscanthus"),
tabsetPanel(
tabPanel("Rojda tab", #--start Rojda panel
mainPanel(
sidebarPanel(
selectInput(inputId = "month1",
label = "Month:",
selected = "Jun",
choices = dd_month)
),
mainPanel(plotOutput("etPlot1")))
), #--end Rojda panel
tabPanel("Tyler tab", #--start Tyler tab
mainPanel(
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput(inputId = "month2",
label = "Tyler's Favorite Month:",
selected = "Jul",
choices = dd_month)
),
mainPanel(plotOutput("etPlot2")))
), #--end Tyler panel
# Show a plot of the generated distribution
mainPanel(
plotOutput("etPlot"),
plotOutput("et2")
)
)
)
# Define server logic required
server <- function(input, output) {
#--build reactive dataset, changes year and month highlight
liq_dat <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$mymonth, "selected month", "no"))})
# this is for Rojda's tab--------------------------
liq_dat1 <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$month1, "selected", "no"))})
output$etPlot1 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat1(),
aes(x =DOY,
y = ET_daily)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected" = "red",
"no" = "gray80")) +
theme_bw()
})
# This is for Tyler's tab-------------------
liq_dat2 <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$month2, "selected", "no"))
})
output$etPlot2 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat2(),
aes(x =DOY,
y = ET_daily)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected" = "red",
"no" = "gray80")) +
theme_bw()
})
##--build reactive dataset, changes year highlight
liq_dat <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$myyear, "selected month", "no"))
})
output$et2 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = ET_monthly,
aes(x =Group.1,
y = x)) +
#facet_wrap( ~ month,ncol=3)+
#geom_jitter(aes(color = ""), size = 3) +
geom_point(color="red", size=3)+
scale_color_manual(values = c("selected month" = "red",
"no" = "gray80")) +
ylab("Evapotranspiration (mm/day)")+xlab("")+
theme_bw()
})
}
# Run the application
#shinyApp(ui = ui2, server = server)
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(scales)
library(lubridate)
#--read in the data
#dat<- read.csv("C:/Users/myAdmins/Desktop/Rshiny_flux/data_ET-for-shiny.csv")
#dat <- read.csv("~/GitHub/Repository_2020/data/tidy/ET_miscanthus_SABR.csv") %>%
#  mutate(month = month(Month, label = T))
#ET_monthly=aggregate(dat$ET_daily, by=list(dat$month),mean, na.rm=TRUE)
# use R projects to provide base directory, make sure you have the project open
dat <- read_csv("data/tidy/ET_miscanthus_SABR.csv") %>%
mutate(month_id = month(Month, label = T))
# get the mean ET for each month (?)
datmonth <-
dat %>%
group_by(month_id) %>%
summarise(mean_et = mean(ET_daily))
#--create the drop down menu values
dd_year <- dat %>% select(year_id) %>% pull() %>% unique()
dd_month <- dat %>% select(month_id) %>% pull() %>% unique()
ui <- fluidPage(
# Application title
navbarPage("ET SABR Miscanthus"),
tabsetPanel(
tabPanel("Rojda tab", #--start Rojda panel
mainPanel(
sidebarPanel(
selectInput(inputId = "month1",
label = "Month:",
selected = "Jun",
choices = dd_month)
),
mainPanel(plotOutput("etPlot1")))
), #--end Rojda panel
tabPanel("Tyler tab", #--start Tyler tab
mainPanel(
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput(inputId = "month2",
label = "Tyler's Favorite Month:",
selected = "Jul",
choices = dd_month)
),
mainPanel(plotOutput("etPlot2")))
), #--end Tyler panel
# Show a plot of the generated distribution
mainPanel(
plotOutput("etPlot"),
plotOutput("et2")
)
)
)
# Define server logic required
server <- function(input, output) {
#--build reactive dataset, changes year and month highlight
liq_dat <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$mymonth, "selected month", "no"))})
# this is for Rojda's tab--------------------------
liq_dat1 <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$month1, "selected", "no"))})
output$etPlot1 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat1(),
aes(x =DOY,
y = ET_daily)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected" = "red",
"no" = "gray80")) +
theme_bw()
})
# This is for Tyler's tab-------------------
liq_dat2 <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$month2, "selected", "no"))
})
output$etPlot2 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = liq_dat2(),
aes(x =DOY,
y = ET_daily)) +
geom_jitter(aes(color = color_id), size = 3) +
scale_color_manual(values = c("selected" = "red",
"no" = "gray80")) +
theme_bw()
})
##--build reactive dataset, changes year highlight
liq_dat <- reactive({
dat %>%
mutate(color_id = ifelse(month_id == input$myyear, "selected month", "no"))
})
output$et2 <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = ET_monthly,
aes(x =Group.1,
y = x)) +
#facet_wrap( ~ month,ncol=3)+
#geom_jitter(aes(color = ""), size = 3) +
geom_point(color="red", size=3)+
scale_color_manual(values = c("selected month" = "red",
"no" = "gray80")) +
ylab("Evapotranspiration (mm/day)")+xlab("")+
theme_bw()
})
}
# Run the application
#shinyApp(ui = ui2, server = server)
shinyApp(ui = ui, server = server)
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
runApp('Rojda_OurFirstShiny')
